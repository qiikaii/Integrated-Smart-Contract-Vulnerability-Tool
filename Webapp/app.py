import os
import subprocess

from flask import Flask, flash, render_template, request, redirect, url_for
from os import listdir
from os.path import isfile, join
from werkzeug.utils import secure_filename
import math
import time





UPLOAD_FOLDER = 'contracts/'
ALLOWED_EXTENSIONS = {'sol'}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

app.secret_key = "something only you know"

def allowed_file(filename):
	return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def set_truffle_ver(solidity_ver):
	truffle_config_path = "truffle/temp-contract/truffle-config.js"

	f = open(truffle_config_path, "r")
	truffle_config = f.read().split('\n')
	output_config = []
	for line in truffle_config:
		if line.startswith('      version:'):
			output_config.append('      version: "' + solidity_ver+'",')
		else:
			output_config.append(line)

	with open(truffle_config_path, 'w') as f:
		for line in output_config:
		    f.write("%s\n" % line)


def get_installed_solidity_versions():
	proc = subprocess.Popen(['solc-select versions'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8", shell=True)
	installed_versions= proc.stdout.read().split('\n')
	
	output = []

	for version in installed_versions:
		version = version.replace(' ','').split('(')[0]
		output.append(version)

	return list(filter(None, output))



def get_solidity_ver(solidity_code):
	solidity_code = solidity_code.split('\n')

	for line in solidity_code:

		if line.startswith('pragma solidity ') and line.endswith(';\r'):
			
			line = line.replace('pragma solidity ', '')
			line = line.replace(';', '')
			line = line.replace('\r', '')
			line = line.replace(' ', '')
			pragma_ver = line

			if pragma_ver.startswith('^') and '.' in pragma_ver:
				print(pragma_ver)
				pragma_ver = pragma_ver[1:]
				print(pragma_ver)
				return [pragma_ver,False]


			elif pragma_ver.startswith('>=') and '<' and '.' in pragma_ver:
				pragma_ver = pragma_ver[2:]
				pragma_ver = pragma_ver.replace(' ','')
				pragma_ver = pragma_ver.split('<')
				if len(pragma_ver) == 2:
					pragma_ver = pragma_ver[1]

					return [pragma_ver,True]

			elif pragma_ver.startswith('>') and '<' and '.' in pragma_ver:
				pragma_ver = pragma_ver[1:]
				pragma_ver = pragma_ver.replace(' ','')
				pragma_ver = pragma_ver.split('<')
				if len(pragma_ver) == 2:
					pragma_ver = pragma_ver[1]

					return [pragma_ver,True]

			else:
				return [pragma_ver,False]



def set_solidity_version(install_versions, contract_version, round_up):


	if round_up:
		
		contract_version = float(contract_version.replace('0.',''))

		processed_installed_versions = []

		for version in install_versions:
			version = float(version.replace('0.',''))
			processed_installed_versions.append(version)

		processed_installed_versions.sort(reverse=True)

		for version in processed_installed_versions:
			if version < contract_version:
				proc = subprocess.Popen(['solc-select use 0.' + str(version)], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8", shell=True)
				proc_out = proc.stdout.read()
				print(proc_out)
				return True

		return False

	else:
		print(repr(contract_version))
		print(repr(install_versions))
		if contract_version in install_versions:

			proc = subprocess.Popen(['solc-select use ' + contract_version], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8", shell=True)
			proc_out = proc.stdout.read()
			print(proc_out)
			return True

		else:
			return False	
	


@app.route("/", methods=['GET', 'POST'])
def home():

	toolOutput = None
	contractfilename = None
	contractcode = None
	selectedTool = None




	if request.method == 'POST':
		if "upload" in request.form:
			print('upload button clicked')

		elif "delete" in request.form:
			print('delete button clicked')
			os.remove("contracts/" + request.form['file_selected'])

		elif "save" in request.form:
			print('save button clicked')
			contractfilename = request.form['file_selected']
			contractcode = request.form['contract_code']
			f = open("contracts/"+contractfilename, "w")
			f.write(contractcode)
			f.close()



	path = "contracts"
	filesInFolder = [f for f in listdir(path) if isfile(join(path, f))]
	contractFiles = {}
	counter = 1
	for file in filesInFolder:
		f = open("contracts/"+file, "r")
		contractFiles[file] = [counter, f.read()]
		counter+=1




	path = "tools/file_analysis/"
	tools = []
	filesInFolder = [f for f in listdir(path) if isfile(join(path, f))]
	for file in filesInFolder:
		f = open(path + file, "r")
		tools.append(file.replace(".sh",""))



	return render_template("index.html", files=contractFiles, tools=tools, toolOutput=toolOutput, selectedTool=selectedTool, selectedcontract=contractfilename, contractcode=contractcode)


@app.route('/analyze', methods=['GET', 'POST'])
def analyze():

	if request.method == 'POST':

			if "analyze" in request.form:
				print('analyze button clicked')
				selectedTool = request.form['selectedTool']
				toolname = 'tools/file_analysis/' + selectedTool + '.sh'
				contractfilename = request.form['file_selected']
				contractcode = request.form['contract_code']

				f = open("staging/temp_contract_file.sol", "w")
				f.write(contractcode)
				f.close()



	def get_result(tool, contractcode):

					
		installed_solidity_vers = get_installed_solidity_versions()
		contract_solidity_ver = get_solidity_ver(contractcode)
		solidity_compiler_set = set_solidity_version(installed_solidity_vers, contract_solidity_ver[0], contract_solidity_ver[1])

		if solidity_compiler_set:
			proc = subprocess.Popen([toolname], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8", shell=True)

			toolOutput = "{}\n".format(proc.stdout.read())
			print(toolOutput)
			yield toolOutput

		else:
			yield "{}\n".format('error')

	return app.response_class(get_result(toolname, contractcode), mimetype="text/plain")

@app.route('/onchain', methods=['GET', 'POST'])
def on_chain():

	toolOutput = None
	contractfilename = None
	contractcode = None
	selectedTool = None

	if request.method == 'POST':
		if "upload" in request.form:
			print('upload button clicked')

		elif "delete" in request.form:
			print('delete button clicked')
			os.remove("contracts/" + request.form['file_selected'])

		elif "save" in request.form:
			print('save button clicked')
			contractfilename = request.form['file_selected']
			contractcode = request.form['contract_code']
			f = open("contracts/"+contractfilename, "w")
			f.write(contractcode)
			f.close()

	path = "contracts"
	filesInFolder = [f for f in listdir(path) if isfile(join(path, f))]
	contractFiles = {}
	counter = 1
	for file in filesInFolder:
		f = open("contracts/"+file, "r")
		contractFiles[file] = [counter, f.read()]
		counter+=1


	path = "tools/onchain_analysis/"
	tools = []
	filesInFolder = [f for f in listdir(path) if isfile(join(path, f))]
	for file in filesInFolder:

		tools.append(file.replace(".sh",""))


	return render_template("onchain.html", files=contractFiles, tools=tools, toolOutput=toolOutput, selectedTool=selectedTool, selectedcontract=contractfilename, contractcode=contractcode)


@app.route('/on_chain_analyze', methods=['GET', 'POST'])
def on_chain_analyze():
	
	if request.method == 'POST':
	
		if "analyze" in request.form:
			print('analyze button clicked')
			selectedTool = request.form['selectedTool']
			toolname = 'tools/onchain_analysis/' + selectedTool + '.sh'
			contractfilename = request.form['file_selected']
			contractcode = request.form['contract_code']
			f = open("truffle/temp-contract/contracts/temp_contract_file.sol", "w")
			f.write(contractcode)
			f.close()


			installed_solidity_vers = get_installed_solidity_versions()
			contract_version = get_solidity_ver(contractcode)[0]

			contract_version = float(contract_version.replace('0.',''))

			processed_installed_versions = []

			for version in installed_solidity_vers:
				version = float(version.replace('0.',''))
				processed_installed_versions.append(version)

			processed_installed_versions.sort(reverse=True)

			for version in processed_installed_versions:
				if version <= contract_version:
					set_truffle_ver('0.' + str(version))
					break

	
	def build_deployer(contracts):
		output = ''
		artifactsRequire = ''
		deployerDeploy = ''

		for contract in contracts:
			artifactsRequire += 'var '+contract+'=artifacts.require ("'+contract+'");\n'
			deployerDeploy += 'deployer.deploy('+contract+');\n'
		output = artifactsRequire +'module.exports = function(deployer) {      '+deployerDeploy+'}'
		return output

	def get_result():
		yield '==========================================================================================' + '\n'
		path = "truffle/temp-contract/build/contracts"
		
		deployContractJs = ''
		os.chdir(path)
		filesInFolder = os.listdir(os.getcwd())
		if filesInFolder:
			for file in filesInFolder:
				os.remove(file)

		truffleCompile = subprocess.Popen(['truffle', 'compile'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
		
		yield truffleCompile.stdout.read() + '\n'


		filesInFolder = os.listdir(os.getcwd())
		path ="../../"
		os.chdir(path)


		for i in range(len(filesInFolder)):
			filesInFolder[i] = filesInFolder[i].replace('.json', '')
		deployContractJs += build_deployer(filesInFolder)

		f = open("migrations/1_initial_migration.js", "w")
		f.write(deployContractJs)
		f.close()



		ganacheCli = subprocess.Popen(['ganache-cli'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")

		yield 'Started ganache-cli' + '\n'

		yield 'Deploying contracts...' + '\n'


		truffleMigrate = subprocess.Popen(['truffle', 'migrate'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
		migrationOutput = truffleMigrate.stdout.read()
		yield migrationOutput + '\n'
					

		yield 'Contracts deployed' + '\n'

					
		yield '\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' + '\n'
		yield 'Analysis Results' + '\n'
		yield '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' + '\n'
		migrationOutput = migrationOutput.split("\n")
		path ="../../"
		os.chdir(path)
		for line in migrationOutput:
			if line.startswith('   > contract address:    '):
				line = line.replace('   > contract address:    ','')
				
				mythanalysis = subprocess.Popen([toolname, line], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")

				yield mythanalysis.stdout.read() + '\n'


		ganacheCli.terminate()
		yield '=========================================================================================='

	return app.response_class(get_result(), mimetype="text/plain")



@app.route('/rpc', methods=['GET', 'POST'])
def rpc():


	path = "tools/rpc_analysis/"
	tools = []
	filesInFolder = [f for f in listdir(path) if isfile(join(path, f))]
	for file in filesInFolder:
		tools.append(file.replace(".sh",""))

	return render_template("rpc.html", tools=tools)


@app.route('/rpc_analysis', methods=['GET', 'POST'])
def rpc_analysis():
	
	if request.method == 'POST':
	
		if "analyze" in request.form:
			print('analyze button clicked')
			selectedTool = request.form['selectedTool']
			toolname = 'tools/rpc_analysis/' + selectedTool + '.sh'
			contract_add = request.form['contract_add']
			ip = request.form['ip']
			port = request.form['port']
		

	def get_result(toolname, contract_add, ip , port):

			print(repr(contract_add))
			rpc_analysis = subprocess.Popen([toolname, ip, port, contract_add], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
			yield rpc_analysis.stdout.read() + '\n'

	return app.response_class(get_result(toolname, contract_add, ip , port), mimetype="text/plain")



@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
	if request.method == 'POST':
		# check if the post request has the file part
		if 'file' not in request.files:
			flash('No file part')
			return home()
		file = request.files['file']
		# If the user does not select a file, the browser submits an
		# empty file without a filename.
		if file.filename == '':
			flash('No selected file')
			return home()
		if file and allowed_file(file.filename):
			filename = secure_filename(file.filename)
			file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
			return home()
	return home()





if __name__ == "__main__":
	app.run(debug=True)
